<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converter="clr-namespace:H.Framework.WPF.Infrastructure.Converters;assembly=H.Framework.WPF.Infrastructure"
    xmlns:local="clr-namespace:H.Framework.WPF.Control.Controls">
    <converter:ObjectConverter x:Key="objConverter" />
    <DataTemplate x:Key="DefaultWatermarkTemplate">
        <ContentControl
            Content="{Binding}"
            Focusable="False"
            Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
    </DataTemplate>

    <ControlTemplate x:Key="WatermarkComboBoxTemplate" TargetType="{x:Type local:ComboBoxEx}">
        <Border
            Grid.ColumnSpan="2"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding BorderCornerRadius}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                </Grid.ColumnDefinitions>
                <Popup
                    x:Name="PART_Popup"
                    Grid.ColumnSpan="2"
                    AllowsTransparency="True"
                    IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Bottom"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Grid
                        x:Name="DropDown"
                        MinWidth="{TemplateBinding ActualWidth}"
                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                        ClipToBounds="False"
                        SnapsToDevicePixels="True">
                        <Border
                            x:Name="DropDownBorder"
                            Margin="6"
                            Padding="0,5"
                            Background="{Binding DropBG, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            BorderThickness="0"
                            ClipToBounds="False"
                            CornerRadius="5">
                            <Border.Effect>
                                <DropShadowEffect
                                    BlurRadius="{TemplateBinding DropBlurRadius}"
                                    Opacity="0.3"
                                    ShadowDepth="0"
                                    Color="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DropShadow.Color}" />
                            </Border.Effect>
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid">
                                    <!--<Canvas
                                        x:Name="canvas"
                                        Width="0"
                                        Height="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                        <Rectangle
                                            x:Name="OpaqueRect"
                                            Width="{Binding ActualWidth, ElementName=DropDownBorder}"
                                            Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                            Fill="{Binding Background, ElementName=DropDownBorder}" />
                                    </Canvas>-->
                                    <ItemsPresenter
                                        x:Name="ItemsPresenter"
                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Grid>
                </Popup>
                <ToggleButton
                    x:Name="toggleButton"
                    Grid.ColumnSpan="2"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="OverridesDefaultStyle" Value="True" />
                            <Setter Property="IsTabStop" Value="False" />
                            <Setter Property="Focusable" Value="False" />
                            <Setter Property="ClickMode" Value="Press" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border
                                            x:Name="templateRoot"
                                            Background="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type local:ComboBoxEx}}}"
                                            CornerRadius="{Binding BorderCornerRadius, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type local:ComboBoxEx}}}"
                                            SnapsToDevicePixels="True">
                                            <Border
                                                x:Name="splitBorder"
                                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                                Margin="0"
                                                HorizontalAlignment="Right"
                                                BorderBrush="Transparent"
                                                SnapsToDevicePixels="True">
                                                <Path
                                                    x:Name="Arrow"
                                                    HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    Data="M0.95637807,0.5 C1.0774105,0.50000003 1.193479,0.54811147 1.2790188,0.6337375 L5.4962878,4.8508607 9.7132659,0.6337375 C9.892631,0.46259245 10.175803,0.46587831 10.351148,0.64113937 10.526494,0.81640032 10.529917,1.0995706 10.358859,1.2790188 L5.8417339,5.7959877 C5.7552619,5.8824183 5.6391334,5.9293252 5.5200495,5.9295617 L5.4932799,5.9287378 5.4733472,5.9297253 C5.3523149,5.9297253 5.2362461,5.8816139 5.1507067,5.7959877 L0.63373737,1.2790188 C0.54811144,1.1934791 0.5,1.0774106 0.5,0.95637807 0.5,0.83534569 0.54811144,0.71927716 0.63373737,0.6337375 0.71927713,0.54811147 0.83534565,0.50000003 0.95637807,0.5 z"
                                                    Fill="{Binding DropArrowColor, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type local:ComboBoxEx}}}" />
                                            </Border>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                                                </MultiDataTrigger.Conditions>
                                                <!--<Setter TargetName="templateRoot" Property="Background" Value="White" />-->
                                                <Setter TargetName="splitBorder" Property="Background" Value="Transparent" />
                                                <Setter TargetName="splitBorder" Property="BorderBrush" Value="Transparent" />
                                            </MultiDataTrigger>
                                            <!--<Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="Arrow" Property="Fill" Value="Black" />
                                            </Trigger>-->
                                            <!--  IsEditable = False MouseOver的背景  -->
                                            <!--<MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="templateRoot" Property="Background">
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientStop Offset="0" Color="#FFECF4FC" />
                                                        <GradientStop Offset="1" Color="#FFDCECFC" />
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FF7EB4EA" />
                                        </MultiDataTrigger>-->
                                            <!--  IsEditable = True MouseOver的背景  -->
                                            <!--<MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="templateRoot" Property="Background" Value="White" />
                                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FF7EB4EA" />
                                            <Setter TargetName="splitBorder" Property="Background">
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientStop Offset="0" Color="#FFEBF4FC" />
                                                        <GradientStop Offset="1" Color="#FFDCECFC" />
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="#FF7EB4EA" />
                                        </MultiDataTrigger>-->
                                            <!--<Trigger Property="IsPressed" Value="True">
                                                <Setter TargetName="Arrow" Property="Fill" Value="Black" />
                                            </Trigger>-->
                                            <!--  IsEditable = False IsPressed的背景  -->
                                            <!--<MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="templateRoot" Property="Background">
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientStop Offset="0" Color="#FFDAECFC" />
                                                        <GradientStop Offset="1" Color="#FFC4E0FC" />
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FF569DE5" />
                                        </MultiDataTrigger>-->
                                            <!--  IsEditable = True IsPressed的背景  -->
                                            <!--<MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="templateRoot" Property="Background" Value="White" />
                                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FF569DE5" />
                                            <Setter TargetName="splitBorder" Property="Background">
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientStop Offset="0" Color="#FFDAEBFC" />
                                                        <GradientStop Offset="1" Color="#FFC4E0FC" />
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="#FF569DE5" />
                                        </MultiDataTrigger>-->
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter TargetName="Arrow" Property="Fill" Value="#FFBFBFBF" />
                                            </Trigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false" />
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="templateRoot" Property="Background" Value="Transparent" />
                                                <Setter TargetName="templateRoot" Property="BorderBrush" Value="Transparent" />
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                </MultiDataTrigger.Conditions>
                                                <!--<Setter TargetName="templateRoot" Property="Background" Value="White" />
                                                <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FFBFBFBF" />-->
                                                <Setter TargetName="splitBorder" Property="Background" Value="Transparent" />
                                                <Setter TargetName="splitBorder" Property="BorderBrush" Value="Transparent" />
                                            </MultiDataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <ContentPresenter
                    x:Name="contentPresenter"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding SelectionBoxItem}"
                    ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                    ContentTemplate="{TemplateBinding SelectionItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                    IsHitTestVisible="False"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Border
                    x:Name="Border"
                    BorderThickness="0"
                    Visibility="Collapsed">
                    <TextBox
                        x:Name="PART_EditableTextBox"
                        Margin="{TemplateBinding Padding}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        CaretBrush="Red"
                        FontFamily="{TemplateBinding FontFamily}"
                        FontSize="{TemplateBinding FontSize}"
                        FontWeight="{TemplateBinding FontWeight}"
                        IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}">
                        <TextBox.Style>
                            <Style TargetType="{x:Type TextBox}">
                                <Setter Property="OverridesDefaultStyle" Value="True" />
                                <Setter Property="AllowDrop" Value="True" />
                                <Setter Property="MinWidth" Value="0" />
                                <Setter Property="MinHeight" Value="0" />
                                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type TextBox}">
                                            <ScrollViewer
                                                x:Name="PART_ContentHost"
                                                Background="Transparent"
                                                Focusable="False"
                                                HorizontalScrollBarVisibility="Hidden"
                                                VerticalScrollBarVisibility="Hidden" />
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </Border>
                <ContentPresenter
                    x:Name="PART_WatermarkHost"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding Watermark}"
                    ContentTemplate="{TemplateBinding WatermarkTemplate}"
                    IsHitTestVisible="False"
                    Visibility="Collapsed" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="DropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
                          Value="False" />-->
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
            <!--<Trigger SourceName="DropDownScrollViewer" Property="CanContentScroll" Value="False">
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>-->
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Padding" Value="2" />
                <Setter TargetName="Border" Property="Visibility" Value="Visible" />
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="Text" Value="" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter TargetName="PART_WatermarkHost" Property="Visibility" Value="Visible" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="WatermarkComboBox" TargetType="{x:Type local:ComboBoxEx}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle
                                    Margin="2"
                                    SnapsToDevicePixels="True"
                                    Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                    StrokeDashArray="1 2"
                                    StrokeThickness="1" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#FFF0F0F0" />
                    <GradientStop Offset="1" Color="#FFE5E5E5" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="#FFACACAC" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="6,3,5,3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="Template" Value="{StaticResource WatermarkComboBoxTemplate}" />
    </Style>

    <Style BasedOn="{StaticResource WatermarkComboBox}" TargetType="{x:Type local:ComboBoxEx}" />
</ResourceDictionary>