// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zeus_user_msg.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zeus.RPC.Protocol {
  public static partial class UserRpcService
  {
    static readonly string __ServiceName = "Zeus.RPC.Protocol.UserRpcService";

    static readonly grpc::Marshaller<global::Zeus.RPC.Protocol.UsersReq> __Marshaller_Zeus_RPC_Protocol_UsersReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zeus.RPC.Protocol.UsersReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zeus.RPC.Protocol.UsersResp> __Marshaller_Zeus_RPC_Protocol_UsersResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zeus.RPC.Protocol.UsersResp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zeus.RPC.Protocol.UserReq> __Marshaller_Zeus_RPC_Protocol_UserReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zeus.RPC.Protocol.UserReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zeus.RPC.Protocol.UserResp> __Marshaller_Zeus_RPC_Protocol_UserResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zeus.RPC.Protocol.UserResp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zeus.RPC.Protocol.UserLevelReq> __Marshaller_Zeus_RPC_Protocol_UserLevelReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zeus.RPC.Protocol.UserLevelReq.Parser.ParseFrom);

    static readonly grpc::Method<global::Zeus.RPC.Protocol.UsersReq, global::Zeus.RPC.Protocol.UsersResp> __Method_GetUsers = new grpc::Method<global::Zeus.RPC.Protocol.UsersReq, global::Zeus.RPC.Protocol.UsersResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUsers",
        __Marshaller_Zeus_RPC_Protocol_UsersReq,
        __Marshaller_Zeus_RPC_Protocol_UsersResp);

    static readonly grpc::Method<global::Zeus.RPC.Protocol.UserReq, global::Zeus.RPC.Protocol.UserResp> __Method_GetUser = new grpc::Method<global::Zeus.RPC.Protocol.UserReq, global::Zeus.RPC.Protocol.UserResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUser",
        __Marshaller_Zeus_RPC_Protocol_UserReq,
        __Marshaller_Zeus_RPC_Protocol_UserResp);

    static readonly grpc::Method<global::Zeus.RPC.Protocol.UserLevelReq, global::Zeus.RPC.Protocol.UserResp> __Method_UpdateUserLevel = new grpc::Method<global::Zeus.RPC.Protocol.UserLevelReq, global::Zeus.RPC.Protocol.UserResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateUserLevel",
        __Marshaller_Zeus_RPC_Protocol_UserLevelReq,
        __Marshaller_Zeus_RPC_Protocol_UserResp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zeus.RPC.Protocol.ZeusUserMsgReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UserRpcService</summary>
    [grpc::BindServiceMethod(typeof(UserRpcService), "BindService")]
    public abstract partial class UserRpcServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Zeus.RPC.Protocol.UsersResp> GetUsers(global::Zeus.RPC.Protocol.UsersReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Zeus.RPC.Protocol.UserResp> GetUser(global::Zeus.RPC.Protocol.UserReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Zeus.RPC.Protocol.UserResp> UpdateUserLevel(global::Zeus.RPC.Protocol.UserLevelReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserRpcService</summary>
    public partial class UserRpcServiceClient : grpc::ClientBase<UserRpcServiceClient>
    {
      /// <summary>Creates a new client for UserRpcService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserRpcServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserRpcService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserRpcServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserRpcServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserRpcServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Zeus.RPC.Protocol.UsersResp GetUsers(global::Zeus.RPC.Protocol.UsersReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Zeus.RPC.Protocol.UsersResp GetUsers(global::Zeus.RPC.Protocol.UsersReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUsers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Zeus.RPC.Protocol.UsersResp> GetUsersAsync(global::Zeus.RPC.Protocol.UsersReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUsersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Zeus.RPC.Protocol.UsersResp> GetUsersAsync(global::Zeus.RPC.Protocol.UsersReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUsers, null, options, request);
      }
      public virtual global::Zeus.RPC.Protocol.UserResp GetUser(global::Zeus.RPC.Protocol.UserReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Zeus.RPC.Protocol.UserResp GetUser(global::Zeus.RPC.Protocol.UserReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Zeus.RPC.Protocol.UserResp> GetUserAsync(global::Zeus.RPC.Protocol.UserReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Zeus.RPC.Protocol.UserResp> GetUserAsync(global::Zeus.RPC.Protocol.UserReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUser, null, options, request);
      }
      public virtual global::Zeus.RPC.Protocol.UserResp UpdateUserLevel(global::Zeus.RPC.Protocol.UserLevelReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserLevel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Zeus.RPC.Protocol.UserResp UpdateUserLevel(global::Zeus.RPC.Protocol.UserLevelReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUserLevel, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Zeus.RPC.Protocol.UserResp> UpdateUserLevelAsync(global::Zeus.RPC.Protocol.UserLevelReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserLevelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Zeus.RPC.Protocol.UserResp> UpdateUserLevelAsync(global::Zeus.RPC.Protocol.UserLevelReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUserLevel, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserRpcServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserRpcServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserRpcServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetUsers, serviceImpl.GetUsers)
          .AddMethod(__Method_GetUser, serviceImpl.GetUser)
          .AddMethod(__Method_UpdateUserLevel, serviceImpl.UpdateUserLevel).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UserRpcServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetUsers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zeus.RPC.Protocol.UsersReq, global::Zeus.RPC.Protocol.UsersResp>(serviceImpl.GetUsers));
      serviceBinder.AddMethod(__Method_GetUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zeus.RPC.Protocol.UserReq, global::Zeus.RPC.Protocol.UserResp>(serviceImpl.GetUser));
      serviceBinder.AddMethod(__Method_UpdateUserLevel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zeus.RPC.Protocol.UserLevelReq, global::Zeus.RPC.Protocol.UserResp>(serviceImpl.UpdateUserLevel));
    }

  }
}
#endregion
