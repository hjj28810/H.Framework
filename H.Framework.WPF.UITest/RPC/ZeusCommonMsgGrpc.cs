// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zeus_common_msg.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zeus.RPC.Protocol {
  public static partial class CommonRpcService
  {
    static readonly string __ServiceName = "Zeus.RPC.Protocol.CommonRpcService";

    static readonly grpc::Marshaller<global::Zeus.RPC.Protocol.VerificationCodeReq> __Marshaller_Zeus_RPC_Protocol_VerificationCodeReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zeus.RPC.Protocol.VerificationCodeReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Zeus.RPC.Protocol.VerificationCodeResp> __Marshaller_Zeus_RPC_Protocol_VerificationCodeResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Zeus.RPC.Protocol.VerificationCodeResp.Parser.ParseFrom);

    static readonly grpc::Method<global::Zeus.RPC.Protocol.VerificationCodeReq, global::Zeus.RPC.Protocol.VerificationCodeResp> __Method_VerifyCode = new grpc::Method<global::Zeus.RPC.Protocol.VerificationCodeReq, global::Zeus.RPC.Protocol.VerificationCodeResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VerifyCode",
        __Marshaller_Zeus_RPC_Protocol_VerificationCodeReq,
        __Marshaller_Zeus_RPC_Protocol_VerificationCodeResp);

    static readonly grpc::Method<global::Zeus.RPC.Protocol.VerificationCodeReq, global::Zeus.RPC.Protocol.VerificationCodeResp> __Method_GetVerificationCode = new grpc::Method<global::Zeus.RPC.Protocol.VerificationCodeReq, global::Zeus.RPC.Protocol.VerificationCodeResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVerificationCode",
        __Marshaller_Zeus_RPC_Protocol_VerificationCodeReq,
        __Marshaller_Zeus_RPC_Protocol_VerificationCodeResp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zeus.RPC.Protocol.ZeusCommonMsgReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CommonRpcService</summary>
    [grpc::BindServiceMethod(typeof(CommonRpcService), "BindService")]
    public abstract partial class CommonRpcServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Zeus.RPC.Protocol.VerificationCodeResp> VerifyCode(global::Zeus.RPC.Protocol.VerificationCodeReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Zeus.RPC.Protocol.VerificationCodeResp> GetVerificationCode(global::Zeus.RPC.Protocol.VerificationCodeReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CommonRpcService</summary>
    public partial class CommonRpcServiceClient : grpc::ClientBase<CommonRpcServiceClient>
    {
      /// <summary>Creates a new client for CommonRpcService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CommonRpcServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CommonRpcService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CommonRpcServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CommonRpcServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CommonRpcServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Zeus.RPC.Protocol.VerificationCodeResp VerifyCode(global::Zeus.RPC.Protocol.VerificationCodeReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Zeus.RPC.Protocol.VerificationCodeResp VerifyCode(global::Zeus.RPC.Protocol.VerificationCodeReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyCode, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Zeus.RPC.Protocol.VerificationCodeResp> VerifyCodeAsync(global::Zeus.RPC.Protocol.VerificationCodeReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Zeus.RPC.Protocol.VerificationCodeResp> VerifyCodeAsync(global::Zeus.RPC.Protocol.VerificationCodeReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyCode, null, options, request);
      }
      public virtual global::Zeus.RPC.Protocol.VerificationCodeResp GetVerificationCode(global::Zeus.RPC.Protocol.VerificationCodeReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVerificationCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Zeus.RPC.Protocol.VerificationCodeResp GetVerificationCode(global::Zeus.RPC.Protocol.VerificationCodeReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVerificationCode, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Zeus.RPC.Protocol.VerificationCodeResp> GetVerificationCodeAsync(global::Zeus.RPC.Protocol.VerificationCodeReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVerificationCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Zeus.RPC.Protocol.VerificationCodeResp> GetVerificationCodeAsync(global::Zeus.RPC.Protocol.VerificationCodeReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVerificationCode, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CommonRpcServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CommonRpcServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CommonRpcServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_VerifyCode, serviceImpl.VerifyCode)
          .AddMethod(__Method_GetVerificationCode, serviceImpl.GetVerificationCode).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CommonRpcServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_VerifyCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zeus.RPC.Protocol.VerificationCodeReq, global::Zeus.RPC.Protocol.VerificationCodeResp>(serviceImpl.VerifyCode));
      serviceBinder.AddMethod(__Method_GetVerificationCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zeus.RPC.Protocol.VerificationCodeReq, global::Zeus.RPC.Protocol.VerificationCodeResp>(serviceImpl.GetVerificationCode));
    }

  }
}
#endregion
