// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zeus_futures_company_msg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Zeus.RPC.Protocol {

  /// <summary>Holder for reflection information generated from zeus_futures_company_msg.proto</summary>
  public static partial class ZeusFuturesCompanyMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for zeus_futures_company_msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ZeusFuturesCompanyMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch56ZXVzX2Z1dHVyZXNfY29tcGFueV9tc2cucHJvdG8SEVpldXMuUlBDLlBy",
            "b3RvY29sGg56ZXVzX21zZy5wcm90byL2AgoYRnV0dXJlc0NvbXBhbnlDb3Vu",
            "dGVyRFRPEhIKCmNvdW50ZXJfaWQYASABKAkSFAoMY291bnRlcl9jb2RlGAIg",
            "ASgJEhQKDGNvdW50ZXJfbmFtZRgDIAEoCRIUCgxjb25uZWN0X25hbWUYBCAB",
            "KAkSEgoKY29ubmVjdF9wdxgFIAEoCRIbChNjb25uZWN0X2V4dGVybl9jb2Rl",
            "GAYgASgJEhcKD2xvY2FsX2Jyb2tlcl9pZBgHIAEoCRIUCgxwcm9kdWN0X25h",
            "bWUYCCABKAkSGQoRZ2F0ZV9wcm9kdWN0X25hbWUYCSABKAkSGgoSaXNfYXV0",
            "aG9yaXR5X3ZhbGlkGAogASgIEhUKDWlzX2dhdGVfdmFsaWQYCyABKAgSEQoJ",
            "YXV0aF9jb2RlGAwgASgJEhYKDmdhdGVfYXV0aF9jb2RlGA0gASgJEg8KB2lz",
            "X21haW4YDiABKAgSGgoSZnV0dXJlc19jb21wYW55X2lkGA8gASgJIuIBChFG",
            "dXR1cmVzQ29tcGFueURUTxIKCgJpZBgBIAEoCRIMCgRjb2RlGAIgASgJEgwK",
            "BG5hbWUYAyABKAkSDAoEbG9nbxgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEo",
            "CRINCgVwaG9uZRgGIAEoCRIRCglpc19hY3RpdmUYByABKAgSEQoJYnJva2Vy",
            "X2lkGAggASgJEk0KGGZ1dHVyZXNfY29tcGFueV9jb3VudGVycxgJIAMoCzIr",
            "LlpldXMuUlBDLlByb3RvY29sLkZ1dHVyZXNDb21wYW55Q291bnRlckRUTyIm",
            "ChJGdXR1cmVzQ29tcGFueXNSZXESEAoIcGxhdGZvcm0YASABKAkihAEKE0Z1",
            "dHVyZXNDb21wYW55c1Jlc3ASLQoEcmVzcBgBIAEoCzIfLlpldXMuUlBDLlBy",
            "b3RvY29sLkJhc2VSZXNwb25zZRI+ChBmdXR1cmVzX2NvbXBhbnlzGAIgAygL",
            "MiQuWmV1cy5SUEMuUHJvdG9jb2wuRnV0dXJlc0NvbXBhbnlEVE8ycgoYRnV0",
            "dXJlc0NvbXBhbnlScGNTZXJ2aWNlElYKA0dldBIlLlpldXMuUlBDLlByb3Rv",
            "Y29sLkZ1dHVyZXNDb21wYW55c1JlcRomLlpldXMuUlBDLlByb3RvY29sLkZ1",
            "dHVyZXNDb21wYW55c1Jlc3AiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Zeus.RPC.Protocol.ZeusMsgReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Zeus.RPC.Protocol.FuturesCompanyCounterDTO), global::Zeus.RPC.Protocol.FuturesCompanyCounterDTO.Parser, new[]{ "CounterId", "CounterCode", "CounterName", "ConnectName", "ConnectPw", "ConnectExternCode", "LocalBrokerId", "ProductName", "GateProductName", "IsAuthorityValid", "IsGateValid", "AuthCode", "GateAuthCode", "IsMain", "FuturesCompanyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zeus.RPC.Protocol.FuturesCompanyDTO), global::Zeus.RPC.Protocol.FuturesCompanyDTO.Parser, new[]{ "Id", "Code", "Name", "Logo", "Description", "Phone", "IsActive", "BrokerId", "FuturesCompanyCounters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zeus.RPC.Protocol.FuturesCompanysReq), global::Zeus.RPC.Protocol.FuturesCompanysReq.Parser, new[]{ "Platform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zeus.RPC.Protocol.FuturesCompanysResp), global::Zeus.RPC.Protocol.FuturesCompanysResp.Parser, new[]{ "Resp", "FuturesCompanys" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FuturesCompanyCounterDTO : pb::IMessage<FuturesCompanyCounterDTO> {
    private static readonly pb::MessageParser<FuturesCompanyCounterDTO> _parser = new pb::MessageParser<FuturesCompanyCounterDTO>(() => new FuturesCompanyCounterDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FuturesCompanyCounterDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zeus.RPC.Protocol.ZeusFuturesCompanyMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanyCounterDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanyCounterDTO(FuturesCompanyCounterDTO other) : this() {
      counterId_ = other.counterId_;
      counterCode_ = other.counterCode_;
      counterName_ = other.counterName_;
      connectName_ = other.connectName_;
      connectPw_ = other.connectPw_;
      connectExternCode_ = other.connectExternCode_;
      localBrokerId_ = other.localBrokerId_;
      productName_ = other.productName_;
      gateProductName_ = other.gateProductName_;
      isAuthorityValid_ = other.isAuthorityValid_;
      isGateValid_ = other.isGateValid_;
      authCode_ = other.authCode_;
      gateAuthCode_ = other.gateAuthCode_;
      isMain_ = other.isMain_;
      futuresCompanyId_ = other.futuresCompanyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanyCounterDTO Clone() {
      return new FuturesCompanyCounterDTO(this);
    }

    /// <summary>Field number for the "counter_id" field.</summary>
    public const int CounterIdFieldNumber = 1;
    private string counterId_ = "";
    /// <summary>
    ///柜台id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CounterId {
      get { return counterId_; }
      set {
        counterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "counter_code" field.</summary>
    public const int CounterCodeFieldNumber = 2;
    private string counterCode_ = "";
    /// <summary>
    ///柜台code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CounterCode {
      get { return counterCode_; }
      set {
        counterCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "counter_name" field.</summary>
    public const int CounterNameFieldNumber = 3;
    private string counterName_ = "";
    /// <summary>
    ///柜台名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CounterName {
      get { return counterName_; }
      set {
        counterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connect_name" field.</summary>
    public const int ConnectNameFieldNumber = 4;
    private string connectName_ = "";
    /// <summary>
    ///连接名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectName {
      get { return connectName_; }
      set {
        connectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connect_pw" field.</summary>
    public const int ConnectPwFieldNumber = 5;
    private string connectPw_ = "";
    /// <summary>
    ///连接密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectPw {
      get { return connectPw_; }
      set {
        connectPw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connect_extern_code" field.</summary>
    public const int ConnectExternCodeFieldNumber = 6;
    private string connectExternCode_ = "";
    /// <summary>
    ///连接额外code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectExternCode {
      get { return connectExternCode_; }
      set {
        connectExternCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local_broker_id" field.</summary>
    public const int LocalBrokerIdFieldNumber = 7;
    private string localBrokerId_ = "";
    /// <summary>
    ///本地配置brokerID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalBrokerId {
      get { return localBrokerId_; }
      set {
        localBrokerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_name" field.</summary>
    public const int ProductNameFieldNumber = 8;
    private string productName_ = "";
    /// <summary>
    ///产品名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gate_product_name" field.</summary>
    public const int GateProductNameFieldNumber = 9;
    private string gateProductName_ = "";
    /// <summary>
    ///网关产品名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GateProductName {
      get { return gateProductName_; }
      set {
        gateProductName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_authority_valid" field.</summary>
    public const int IsAuthorityValidFieldNumber = 10;
    private bool isAuthorityValid_;
    /// <summary>
    ///是否验证授权
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAuthorityValid {
      get { return isAuthorityValid_; }
      set {
        isAuthorityValid_ = value;
      }
    }

    /// <summary>Field number for the "is_gate_valid" field.</summary>
    public const int IsGateValidFieldNumber = 11;
    private bool isGateValid_;
    /// <summary>
    ///是否验证网关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGateValid {
      get { return isGateValid_; }
      set {
        isGateValid_ = value;
      }
    }

    /// <summary>Field number for the "auth_code" field.</summary>
    public const int AuthCodeFieldNumber = 12;
    private string authCode_ = "";
    /// <summary>
    ///授权码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthCode {
      get { return authCode_; }
      set {
        authCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gate_auth_code" field.</summary>
    public const int GateAuthCodeFieldNumber = 13;
    private string gateAuthCode_ = "";
    /// <summary>
    ///网关授权码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GateAuthCode {
      get { return gateAuthCode_; }
      set {
        gateAuthCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_main" field.</summary>
    public const int IsMainFieldNumber = 14;
    private bool isMain_;
    /// <summary>
    ///是否主席
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMain {
      get { return isMain_; }
      set {
        isMain_ = value;
      }
    }

    /// <summary>Field number for the "futures_company_id" field.</summary>
    public const int FuturesCompanyIdFieldNumber = 15;
    private string futuresCompanyId_ = "";
    /// <summary>
    ///期货公司id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FuturesCompanyId {
      get { return futuresCompanyId_; }
      set {
        futuresCompanyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FuturesCompanyCounterDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FuturesCompanyCounterDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CounterId != other.CounterId) return false;
      if (CounterCode != other.CounterCode) return false;
      if (CounterName != other.CounterName) return false;
      if (ConnectName != other.ConnectName) return false;
      if (ConnectPw != other.ConnectPw) return false;
      if (ConnectExternCode != other.ConnectExternCode) return false;
      if (LocalBrokerId != other.LocalBrokerId) return false;
      if (ProductName != other.ProductName) return false;
      if (GateProductName != other.GateProductName) return false;
      if (IsAuthorityValid != other.IsAuthorityValid) return false;
      if (IsGateValid != other.IsGateValid) return false;
      if (AuthCode != other.AuthCode) return false;
      if (GateAuthCode != other.GateAuthCode) return false;
      if (IsMain != other.IsMain) return false;
      if (FuturesCompanyId != other.FuturesCompanyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CounterId.Length != 0) hash ^= CounterId.GetHashCode();
      if (CounterCode.Length != 0) hash ^= CounterCode.GetHashCode();
      if (CounterName.Length != 0) hash ^= CounterName.GetHashCode();
      if (ConnectName.Length != 0) hash ^= ConnectName.GetHashCode();
      if (ConnectPw.Length != 0) hash ^= ConnectPw.GetHashCode();
      if (ConnectExternCode.Length != 0) hash ^= ConnectExternCode.GetHashCode();
      if (LocalBrokerId.Length != 0) hash ^= LocalBrokerId.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (GateProductName.Length != 0) hash ^= GateProductName.GetHashCode();
      if (IsAuthorityValid != false) hash ^= IsAuthorityValid.GetHashCode();
      if (IsGateValid != false) hash ^= IsGateValid.GetHashCode();
      if (AuthCode.Length != 0) hash ^= AuthCode.GetHashCode();
      if (GateAuthCode.Length != 0) hash ^= GateAuthCode.GetHashCode();
      if (IsMain != false) hash ^= IsMain.GetHashCode();
      if (FuturesCompanyId.Length != 0) hash ^= FuturesCompanyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CounterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CounterId);
      }
      if (CounterCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CounterCode);
      }
      if (CounterName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CounterName);
      }
      if (ConnectName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ConnectName);
      }
      if (ConnectPw.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ConnectPw);
      }
      if (ConnectExternCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ConnectExternCode);
      }
      if (LocalBrokerId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LocalBrokerId);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProductName);
      }
      if (GateProductName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(GateProductName);
      }
      if (IsAuthorityValid != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsAuthorityValid);
      }
      if (IsGateValid != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsGateValid);
      }
      if (AuthCode.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AuthCode);
      }
      if (GateAuthCode.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(GateAuthCode);
      }
      if (IsMain != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsMain);
      }
      if (FuturesCompanyId.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(FuturesCompanyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CounterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CounterId);
      }
      if (CounterCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CounterCode);
      }
      if (CounterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CounterName);
      }
      if (ConnectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectName);
      }
      if (ConnectPw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectPw);
      }
      if (ConnectExternCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectExternCode);
      }
      if (LocalBrokerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalBrokerId);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (GateProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GateProductName);
      }
      if (IsAuthorityValid != false) {
        size += 1 + 1;
      }
      if (IsGateValid != false) {
        size += 1 + 1;
      }
      if (AuthCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthCode);
      }
      if (GateAuthCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GateAuthCode);
      }
      if (IsMain != false) {
        size += 1 + 1;
      }
      if (FuturesCompanyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FuturesCompanyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FuturesCompanyCounterDTO other) {
      if (other == null) {
        return;
      }
      if (other.CounterId.Length != 0) {
        CounterId = other.CounterId;
      }
      if (other.CounterCode.Length != 0) {
        CounterCode = other.CounterCode;
      }
      if (other.CounterName.Length != 0) {
        CounterName = other.CounterName;
      }
      if (other.ConnectName.Length != 0) {
        ConnectName = other.ConnectName;
      }
      if (other.ConnectPw.Length != 0) {
        ConnectPw = other.ConnectPw;
      }
      if (other.ConnectExternCode.Length != 0) {
        ConnectExternCode = other.ConnectExternCode;
      }
      if (other.LocalBrokerId.Length != 0) {
        LocalBrokerId = other.LocalBrokerId;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.GateProductName.Length != 0) {
        GateProductName = other.GateProductName;
      }
      if (other.IsAuthorityValid != false) {
        IsAuthorityValid = other.IsAuthorityValid;
      }
      if (other.IsGateValid != false) {
        IsGateValid = other.IsGateValid;
      }
      if (other.AuthCode.Length != 0) {
        AuthCode = other.AuthCode;
      }
      if (other.GateAuthCode.Length != 0) {
        GateAuthCode = other.GateAuthCode;
      }
      if (other.IsMain != false) {
        IsMain = other.IsMain;
      }
      if (other.FuturesCompanyId.Length != 0) {
        FuturesCompanyId = other.FuturesCompanyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CounterId = input.ReadString();
            break;
          }
          case 18: {
            CounterCode = input.ReadString();
            break;
          }
          case 26: {
            CounterName = input.ReadString();
            break;
          }
          case 34: {
            ConnectName = input.ReadString();
            break;
          }
          case 42: {
            ConnectPw = input.ReadString();
            break;
          }
          case 50: {
            ConnectExternCode = input.ReadString();
            break;
          }
          case 58: {
            LocalBrokerId = input.ReadString();
            break;
          }
          case 66: {
            ProductName = input.ReadString();
            break;
          }
          case 74: {
            GateProductName = input.ReadString();
            break;
          }
          case 80: {
            IsAuthorityValid = input.ReadBool();
            break;
          }
          case 88: {
            IsGateValid = input.ReadBool();
            break;
          }
          case 98: {
            AuthCode = input.ReadString();
            break;
          }
          case 106: {
            GateAuthCode = input.ReadString();
            break;
          }
          case 112: {
            IsMain = input.ReadBool();
            break;
          }
          case 122: {
            FuturesCompanyId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FuturesCompanyDTO : pb::IMessage<FuturesCompanyDTO> {
    private static readonly pb::MessageParser<FuturesCompanyDTO> _parser = new pb::MessageParser<FuturesCompanyDTO>(() => new FuturesCompanyDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FuturesCompanyDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zeus.RPC.Protocol.ZeusFuturesCompanyMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanyDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanyDTO(FuturesCompanyDTO other) : this() {
      id_ = other.id_;
      code_ = other.code_;
      name_ = other.name_;
      logo_ = other.logo_;
      description_ = other.description_;
      phone_ = other.phone_;
      isActive_ = other.isActive_;
      brokerId_ = other.brokerId_;
      futuresCompanyCounters_ = other.futuresCompanyCounters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanyDTO Clone() {
      return new FuturesCompanyDTO(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///主键id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private string code_ = "";
    /// <summary>
    ///code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logo" field.</summary>
    public const int LogoFieldNumber = 4;
    private string logo_ = "";
    /// <summary>
    ///logo地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Logo {
      get { return logo_; }
      set {
        logo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    ///描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 6;
    private string phone_ = "";
    /// <summary>
    ///电话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 7;
    private bool isActive_;
    /// <summary>
    ///是否启用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "broker_id" field.</summary>
    public const int BrokerIdFieldNumber = 8;
    private string brokerId_ = "";
    /// <summary>
    ///brokerId  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerId {
      get { return brokerId_; }
      set {
        brokerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "futures_company_counters" field.</summary>
    public const int FuturesCompanyCountersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Zeus.RPC.Protocol.FuturesCompanyCounterDTO> _repeated_futuresCompanyCounters_codec
        = pb::FieldCodec.ForMessage(74, global::Zeus.RPC.Protocol.FuturesCompanyCounterDTO.Parser);
    private readonly pbc::RepeatedField<global::Zeus.RPC.Protocol.FuturesCompanyCounterDTO> futuresCompanyCounters_ = new pbc::RepeatedField<global::Zeus.RPC.Protocol.FuturesCompanyCounterDTO>();
    /// <summary>
    ///柜台列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Zeus.RPC.Protocol.FuturesCompanyCounterDTO> FuturesCompanyCounters {
      get { return futuresCompanyCounters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FuturesCompanyDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FuturesCompanyDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (Logo != other.Logo) return false;
      if (Description != other.Description) return false;
      if (Phone != other.Phone) return false;
      if (IsActive != other.IsActive) return false;
      if (BrokerId != other.BrokerId) return false;
      if(!futuresCompanyCounters_.Equals(other.futuresCompanyCounters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Logo.Length != 0) hash ^= Logo.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (BrokerId.Length != 0) hash ^= BrokerId.GetHashCode();
      hash ^= futuresCompanyCounters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Logo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Logo);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (Phone.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Phone);
      }
      if (IsActive != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsActive);
      }
      if (BrokerId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BrokerId);
      }
      futuresCompanyCounters_.WriteTo(output, _repeated_futuresCompanyCounters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Logo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Logo);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (BrokerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerId);
      }
      size += futuresCompanyCounters_.CalculateSize(_repeated_futuresCompanyCounters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FuturesCompanyDTO other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Logo.Length != 0) {
        Logo = other.Logo;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.BrokerId.Length != 0) {
        BrokerId = other.BrokerId;
      }
      futuresCompanyCounters_.Add(other.futuresCompanyCounters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Logo = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            Phone = input.ReadString();
            break;
          }
          case 56: {
            IsActive = input.ReadBool();
            break;
          }
          case 66: {
            BrokerId = input.ReadString();
            break;
          }
          case 74: {
            futuresCompanyCounters_.AddEntriesFrom(input, _repeated_futuresCompanyCounters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FuturesCompanysReq : pb::IMessage<FuturesCompanysReq> {
    private static readonly pb::MessageParser<FuturesCompanysReq> _parser = new pb::MessageParser<FuturesCompanysReq>(() => new FuturesCompanysReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FuturesCompanysReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zeus.RPC.Protocol.ZeusFuturesCompanyMsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanysReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanysReq(FuturesCompanysReq other) : this() {
      platform_ = other.platform_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanysReq Clone() {
      return new FuturesCompanysReq(this);
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 1;
    private string platform_ = "";
    /// <summary>
    ///平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FuturesCompanysReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FuturesCompanysReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Platform != other.Platform) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Platform.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Platform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FuturesCompanysReq other) {
      if (other == null) {
        return;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Platform = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FuturesCompanysResp : pb::IMessage<FuturesCompanysResp> {
    private static readonly pb::MessageParser<FuturesCompanysResp> _parser = new pb::MessageParser<FuturesCompanysResp>(() => new FuturesCompanysResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FuturesCompanysResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zeus.RPC.Protocol.ZeusFuturesCompanyMsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanysResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanysResp(FuturesCompanysResp other) : this() {
      resp_ = other.resp_ != null ? other.resp_.Clone() : null;
      futuresCompanys_ = other.futuresCompanys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuturesCompanysResp Clone() {
      return new FuturesCompanysResp(this);
    }

    /// <summary>Field number for the "resp" field.</summary>
    public const int RespFieldNumber = 1;
    private global::Zeus.RPC.Protocol.BaseResponse resp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zeus.RPC.Protocol.BaseResponse Resp {
      get { return resp_; }
      set {
        resp_ = value;
      }
    }

    /// <summary>Field number for the "futures_companys" field.</summary>
    public const int FuturesCompanysFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Zeus.RPC.Protocol.FuturesCompanyDTO> _repeated_futuresCompanys_codec
        = pb::FieldCodec.ForMessage(18, global::Zeus.RPC.Protocol.FuturesCompanyDTO.Parser);
    private readonly pbc::RepeatedField<global::Zeus.RPC.Protocol.FuturesCompanyDTO> futuresCompanys_ = new pbc::RepeatedField<global::Zeus.RPC.Protocol.FuturesCompanyDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Zeus.RPC.Protocol.FuturesCompanyDTO> FuturesCompanys {
      get { return futuresCompanys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FuturesCompanysResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FuturesCompanysResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Resp, other.Resp)) return false;
      if(!futuresCompanys_.Equals(other.futuresCompanys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resp_ != null) hash ^= Resp.GetHashCode();
      hash ^= futuresCompanys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Resp);
      }
      futuresCompanys_.WriteTo(output, _repeated_futuresCompanys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resp);
      }
      size += futuresCompanys_.CalculateSize(_repeated_futuresCompanys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FuturesCompanysResp other) {
      if (other == null) {
        return;
      }
      if (other.resp_ != null) {
        if (resp_ == null) {
          Resp = new global::Zeus.RPC.Protocol.BaseResponse();
        }
        Resp.MergeFrom(other.Resp);
      }
      futuresCompanys_.Add(other.futuresCompanys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (resp_ == null) {
              Resp = new global::Zeus.RPC.Protocol.BaseResponse();
            }
            input.ReadMessage(Resp);
            break;
          }
          case 18: {
            futuresCompanys_.AddEntriesFrom(input, _repeated_futuresCompanys_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
